//This program facilitates playing the game 2048. It uses methods to display the board, to see if a direction can be 
//moved, to move each direction (by squeezing out zeros and combining cells in that direction), to see if the game
//has been won, to place a 2 or 4 in a random open space on the board, to see if the game board is in a state in 
//which no more moves are possible, to display help, to undo the last move, to setup a new game, to save the high
//score, to load the high score.
//
//Author: Martin Amos
//Course: EECS 1510
//Instructor: Dr. L. Thomas
//Date: 27 April 2018


import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.stage.Stage;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.scene.text.Font;


public class GUI2048 extends Application
{
	static int[][] board = new int[4][4];
	static int[][][] undoBoard = new int[10][4][4];
	static Font font = new Font(40);
	
	@Override //overriding the start method in the Application class
	public void start(Stage primaryStage)
	{
		GridPane gPane = new GridPane();		//This grid pane will display the 4X4 board
		GridPane Scores = new GridPane();		//This grid pane will contain score/move displays
		BorderPane bPane = new BorderPane();	//This border pane will bet set in the scene
		VBox vBox = new VBox();					//This vbox will contain the necessary buttons
		Button btHelp = new Button("Help");		
		Button btExit = new Button("Exit");
		Button btSave = new Button("Save");
		Button btLoad = new Button("Load");
		
		gPane.setPadding(new Insets(18, 18, 18, 18)); //Set the edge borders to 18 pixels
		gPane.setHgap(18);
		gPane.setVgap(18);
		gPane.setAlignment(Pos.CENTER);
		
		Scores.add(new Text("High Score"), 0, 0);
		Scores.add(new Text("Score"), 1, 0);
		Scores.add(new Text("Moves"), 2, 0);
		
		btHelp.setPrefWidth(80);
		btExit.setPrefWidth(80);
		btSave.setPrefWidth(80);
		btLoad.setPrefWidth(80);
		vBox.getChildren().addAll(btHelp, btSave, btLoad, btExit);
		
		bPane.setCenter(gPane);
		bPane.setLeft(vBox);
		bPane.setTop(Scores);
		
		Scene Game = new Scene(bPane);
		primaryStage.setTitle("2048");
		primaryStage.setScene(Game);
		primaryStage.show();
	}
	
	class Cell extends StackPane
	{
		/* This class Cell creates the individual cells that will go into the main GridPane to show the board. It
		 * extends StackPane because all I really need them to do is hold a number in the center of the cell, have
		 * a background color, and be able to have rounded edges. */
		
		int number;

		Cell(int number)
		{
			/* This constructor receives an integer from the board array and generates the cell that show up in
			 * the GUI. It sets the the constructed cell's number to be equal to the int passed to the constructor.
			 * It sets the cell size to 132x132 pixels then creates a Text object containing the number of the cell
			 * and sets the font.*/
			this.number = number;
			this.setPrefSize(132, 132);
			Text cNum = new Text(""+number);
			cNum.setFont(font);
			cNum.setStyle("-fx-font-weight: BOLD; -fx-font-family: sans-serif");
			/* This switch statement checks the number of the cell and sends the Cell pane to have the number displayed
			 * (if it isn't zero), the background color set, and the corners rounded. */
			switch(number)
			{
			case 0: 	this.setStyle("-fx-background-color: #CCC0B3;-fx-background-radius: 5;");	break;
			case 2: 	this.getChildren().add(cNum);
						this.setStyle("-fx-background-color: #EEE4DA;-fx-background-radius: 5;");	break;
			case 4: 	this.getChildren().add(cNum);
						this.setStyle("-fx-background-color: #EDE0C8;-fx-background-radius: 5;");	break;
			case 8: 	this.getChildren().add(cNum);
						this.setStyle("-fx-background-color: #F2B179;-fx-background-radius: 5;");	break;
			case 16: 	this.getChildren().add(cNum);
						this.setStyle("-fx-background-color: #F59563;-fx-background-radius: 5;");	break;
			case 32: 	this.getChildren().add(cNum);
						this.setStyle("-fx-background-color: #F67C5F;-fx-background-radius: 5;");	break;
			case 64: 	this.getChildren().add(cNum);
						this.setStyle("-fx-background-color: #F65E3B;-fx-background-radius: 5;");	break;
			case 128: 	this.getChildren().add(cNum);
						this.setStyle("-fx-background-color: #EDCF90;-fx-background-radius: 5;");	break;
			case 256: 	this.getChildren().add(cNum);
						this.setStyle("-fx-background-color: #EDCC61;-fx-background-radius: 5;");	break;
			case 512: 	this.getChildren().add(cNum);
						this.setStyle("-fx-background-color: #EDC850;-fx-background-radius: 5;");	break;
			case 1024: 	this.getChildren().add(cNum);
						this.setStyle("-fx-background-color: #EDC53F;-fx-background-radius: 5;");	break;
			case 2048: 	this.getChildren().add(cNum);
						this.setStyle("-fx-background-color: #EDC22E;-fx-background-radius: 5;");	break;
			default: 	this.getChildren().add(cNum);
						this.setStyle("-fx-background-color: #3C3A32;-fx-background-radius: 5;");	break;
			}
		}
	}
	
	public static void main(String[] args)
	{
		/*The textbook claims this shouldn't be necessary, but I've been having trouble getting any javafx programs to run 
		  without it in my Eclipse environment, so I've included this main method which executes Application's launch method*/
		Application.launch(args);
	}
}
